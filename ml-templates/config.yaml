kind: MLApp
metadata:
  name: pytorch
spec:
  package_manager: "pip3"
  packages:
    - names:
      {{- range $i, $value := .packages }}
      - "{{ $value }}"
      {{- end }}
      manager: "pip3"
  default_mount_path: "/notebooks"
  tasks:
  - name: install-tutorials
    type: init
    resources:
    - name: worker
      replicas: 1
      restartPolicy: Never
      maxRestartCount: 0
      allowFail: true
      images:
        gpu: "kuberlab/pytorch:{{.pytorch_version.value}}-gpu"
        cpu: "kuberlab/pytorch:{{.pytorch_version.value}}-cpu"
      command: >-
        git clone https://github.com/kuberlab-catalog/PT-tutorials tutorials
      workdir: "$CODE_DIR"
      resources:
        accelerators:
          gpu: 0
        requests:
          cpu: "100m"
          memory: 1Gi
        limits:
          cpu: "1"
          memory: 4Gi
      default_volume_mapping: true
  - name: run-notebook
    resources:
    - name: worker
      replicas: 1
      restartPolicy: Never
      maxRestartCount: 0
      allowFail: true
      images:
        gpu: "kuberlab/pytorch:{{.pytorch_version.value}}-gpu"
        cpu: "kuberlab/pytorch:{{.pytorch_version.value}}-cpu"
      command: "jupyter nbconvert tutorials/beginner_source/transformer_tutorial.ipynb --execute --to html --output-dir $CODE_DIR --ExecutePreprocessor.timeout=-1"
      workdir: "$SRC_DIR"
      resources:
        accelerators:
          gpu: 0
        requests:
          cpu: 100m
          memory: 64Mi
        limits:
          cpu: 1000m
          memory: 4Gi
      default_volume_mapping: true
  {{- if .installExamples.value }}
  - name: mnist-example
    resources:
    - name: worker
      replicas: 1
      restartPolicy: Never
      maxRestartCount: 0
      allowFail: true
      images:
        gpu: "kuberlab/pytorch:{{.pytorch_version.value}}-gpu"
        cpu: "kuberlab/pytorch:{{.pytorch_version.value}}-cpu"
      command: >-
        python mnist.py --data-dir $DATA_DIR --training_dir $TRAINING_DIR --out-dir $TRAINING_DIR
        --batch-size 64 --epochs 3
      workdir: "$EXAMPLES_DIR"
      resources:
        accelerators:
          gpu: 0
        requests:
          cpu: 100m
          memory: 64Mi
        limits:
          cpu: 3000m
          memory: 4Gi
      default_volume_mapping: true
  {{- end }}
  {{- if .installExamples.value }}
  - name: convert-to-tf
    resources:
    - name: worker
      replicas: 1
      restartPolicy: Never
      maxRestartCount: 0
      allowFail: true
      images:
        gpu: "kuberlab/pytorch:{{.pytorch_version.value}}-gpu"
        cpu: "kuberlab/pytorch:{{.pytorch_version.value}}-cpu"
      command: >-
        torch2tf --input $TRAINING_DIR/checkpoint.pth.tar
        --model-class mnist:Net --input-shape 1,1,28,28 --output $TRAINING_DIR/tf_model
        # && python upload_model.py --model-name mnist-pytorch-tf --version 1.0.0 --from-path $TRAINING_DIR/tf_model
      workdir: "$EXAMPLES_DIR"
      resources:
        accelerators:
          gpu: 0
        requests:
          cpu: 100m
          memory: 64Mi
        limits:
          cpu: 1000m
          memory: 4Gi
      default_volume_mapping: true
  {{- end }}
  uix:
  - name: jupyter
    displayName: Jupyter
    images:
      gpu: "kuberlab/pytorch:{{.pytorch_version.value}}-gpu"
      cpu: "kuberlab/pytorch:{{.pytorch_version.value}}-cpu"
    resources:
      accelerators:
        gpu: 0
      requests:
        cpu: 100m
        memory: 64Mi
      limits:
        cpu: 1000m
        memory: 4Gi
    ports:
    - port: 8888
      targetPort: 8888
      protocol: TCP
      name: http
    default_volume_mapping: true
  {{- if .tensorboard.value }}
  - name: tensorboard
    displayName: Tensorboard
    command: "tensorboard --logdir=$TRAINING_DIR"
    images:
      gpu: "kuberlab/pytorch:{{.pytorch_version.value}}-gpu"
      cpu: "kuberlab/pytorch:{{.pytorch_version.value}}-cpu"
    ports:
    - port: 6006
      targetPort: 6006
      protocol: TCP
      name: http
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 1500m
        memory: 4Gi
    volumes:
    - name: training
  {{- end }}
  volumes:
  - name: training
    clusterStorage: {{ .storage.value }}
  - gitRepo:
      repository: {{ gitRepo .src.value }}
    name: src
    subPath: {{ gitSubPath .src.value }}
  {{- if .installExamples.value }}
  - gitRepo:
      repository: {{ gitRepo "https://github.com/kuberlab/pytorch-examples" }}
    name: examples
    subPath: {{ gitSubPath "https://github.com/kuberlab/pytorch-examples" }}
  {{- end }}
  - isLibDir: true
    name: lib
    clusterStorage: {{ .storage.value }}
  - name: data
    {{- if .dataset.value }}
    datasetFS:
      workspace: {{ .dataset.workspace }}
      dataset: {{ .dataset.value }}
      version: {{ .dataset.version }}
    {{- else }}
    clusterStorage: {{ .storage.value }}
    {{- end }}
  - mountPath: /notebooks
    name: code
    subPath: code
    clusterStorage: {{ .storage.value }}
  - mountPath: /dev/shm
    name: shared
    emptyDir:
      sizeLimit: 8096Mi
      medium: Memory
